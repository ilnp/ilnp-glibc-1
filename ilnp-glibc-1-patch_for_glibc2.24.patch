--- a/nss/nss_files/files-hosts.c
+++ b/nss/nss_files/files-hosts.c
@@ -14,7 +14,7 @@
 
    You should have received a copy of the GNU Lesser General Public
    License along with the GNU C Library; if not, see
-   <http://www.gnu.org/licenses/>.  */
+	 <http://www.gnu.org/licenses/>.  */
 
 #include <assert.h>
 #include <netinet/in.h>
@@ -22,74 +22,265 @@
 #include <arpa/nameser.h>
 #include <netdb.h>
 #include <resolv.h>
+#include <syslog.h>     //added by dp migrated by ry6
+#include <linux/netlink.h>    //added by dp migrated by ry6
+#include <sys/types.h>  //added by dp migrated by ry6
+#include <unistd.h>     //added by ry6
+#include <sys/socket.h> //added by dp migrated by ry6
+#include <stdlib.h>     //added by dp migrated by ry6
+#include <string.h>     //added by dp migrated by ry6
 
+#define NETLINK_ILNP 22    //added by dp migrated by ry6
 
 /* Get implementation for some internal functions.  */
 #include "../resolv/mapv4v6addr.h"
 #include "../resolv/res_hconf.h"
 
 
-#define ENTNAME		hostent
-#define DATABASE	"hosts"
+#define ENTNAME    hostent
+#define DATABASE  "hosts"
 #define NEED_H_ERRNO
 
-#define EXTRA_ARGS	 , af, flags
-#define EXTRA_ARGS_DECL	 , int af, int flags
+#define EXTRA_ARGS   , af, flags
+#define EXTRA_ARGS_DECL   , int af, int flags
 
 #define ENTDATA hostent_data
 struct hostent_data
   {
-    unsigned char host_addr[16]; /* IPv4 or IPv6 address.  */
-    char *h_addr_ptrs[2];	/* Points to that and null terminator.  */
+		unsigned char host_addr[16]; /* IPv4 or IPv6 address.  */
+		char *h_addr_ptrs[2];  /* Points to that and null terminator.  */
   };
 
-#define TRAILING_LIST_MEMBER		h_aliases
-#define TRAILING_LIST_SEPARATOR_P	isspace
+	/* Structure to store I-L_V in a kernel cache*/
+	/* Added by dp, migrated by ry6 */
+struct ilnp_cache_entry
+  {
+    uint64_t    l64;
+  uint64_t    nid;
+  uint32_t    l64_prec;
+  uint32_t    nid_prec;
+  unsigned long    timestamp;
+  };
+
+
+#define TRAILING_LIST_MEMBER    h_aliases
+#define TRAILING_LIST_SEPARATOR_P  isspace
 #include "files-parse.c"
 LINE_PARSER
 ("#",
  {
-   char *addr;
+    char *addr;
+    char *nidp; //added by dp
+    char *nid; // added by ry6
+    char *l64p; //added by ry6
+    char *pl64p; //added by ry6
+    uint32_t prec; //added by dp
+    uint32_t prnid; //added by ry6
+    const char minus = '-'; //added by ry6
+    const char* minus_ptr = &minus; //added by ry6
+    const char plus = '+';  //added by ry6
+    const char* plus_ptr = &plus; // added by ry6
+    struct sockaddr_nl s_nladdr;
+    struct sockaddr_nl d_nladdr;
+    struct msghdr msg ;
+    struct nlmsghdr *nlh = NULL;
+    struct iovec iov;
+    int fd;
+    struct ilnp_cache_entry *entry;
+
+
+    STRING_FIELD (addr, isspace, 1);
+
+
+
+
+    //add by dp migrated by ry6 -----start-------
+    /*
+     * Check for the presence of an IL_V entry, by parsing for
+     * the L64,NID comma delimiter. If present, stop parsing,
+     * and use the IL_V parser instead.
+     */
+
+    nidp = addr;
+    if (strchr(addr,(int)minus)!= NULL && strchr(addr,(int)plus) !=NULL) {
+        l64p = strsep(&nidp, ".");
+        //  return _gethtent_ilnp(hostf, cp, pai, hostbuf);
+        //Extract NID
+        /* Parse the NID field in eui64(5) syntax. */
+        //                  if (eui64_aton(nidp, &nid) != 0) {
+        //                    syslog(LOG_NOTICE, "%s: invalid NID \"%s\"",
+        //                        "getaddrinfo(hosts)", nidp);
+        //                    return 0;
+        //                  }
+
+        //Extract L64 prec
+        pl64p = l64p;
+        l64p = strsep(&pl64p, "|"); //pl64p advances after pipe
+
+				if (pl64p != NULL && *pl64p != '\0')
+          prec = atoi(pl64p);
+        else
+          prec = 0;
+
+        //extract NID prec
+        nid = strsep(&nidp, "|");
+
+				if(nidp != NULL && *nidp != '\0')
+          prnid = atoi(nidp);
+        else
+          prnid = 0;
+
+        char colon = ':';
+        //NID: Replace all '+' with ':'
+        char* tmp = nid;
+        while((tmp = strpbrk(tmp, plus_ptr)) != NULL){
+          tmp[0] = colon;
+        }
+
+        //L64: Replace all '-' with ':'
+        char* tmpl64 = l64p;
+        while((tmpl64 = strpbrk(tmpl64, minus_ptr)) != NULL){
+          tmpl64[0] = colon;
+        }
+
+        syslog(LOG_NOTICE|LOG_AUTH, "%s: ILNP Host found - nid:\"%s\" l64: \"%s\" \n with remaining line: \"%s\"",
+              "getaddrinfo(hosts)", nid, l64p, line);
+
+        // Merge NID and L64
+        // backup and shift
+        char* nid_bkup = malloc(strlen(nid)+1);//plus one for term
+
+        strcpy(nid_bkup, nid); //backup NID
+
+				addr=l64p; //set the addr pointer back
+        //addr = memmove(addr,l64p,strlen(l64p)+1); //+1 to include string termination byte
+        //syslog(LOG_NOTICE|LOG_AUTH, "%s: ILNP shifting l64 - addr:\"%s\" -nid:\"%s\" -line:\"%s\" ",
+        //      "getaddrinfo(hosts)", addr, nid, line);
+
+        strcat(addr,":"); //append colon before appending nid
+
+
+        addr = strcat(addr,nid_bkup);
+        free(nid_bkup);
+
+        syslog(LOG_NOTICE|LOG_AUTH, "%s: ILNP Host merged - addr:\"%s\" -line:\"%s\" ",
+              "getaddrinfo(hosts)", addr, line);
+
+        inet_pton(AF_INET6, addr, entdata->host_addr);
+
+        /* We always return entries of the requested form.  */
+        result->h_addrtype = AF_INET6;
+        result->h_length = IN6ADDRSZ;
+
+        /* Store a pointer to the address in the expected form.  */
+        entdata->h_addr_ptrs[0] = (char *) entdata->host_addr;
+        entdata->h_addr_ptrs[1] = NULL;
+        result->h_addr_list = entdata->h_addr_ptrs;
+
+        STRING_FIELD (result->h_name, isspace, 1);
+
+        TRAILING_LIST_PARSER;
+
+        syslog(LOG_NOTICE|LOG_AUTH, "%s: result->h_name: \"%s\"",
+              "getaddrinfo(hosts)", result->h_name);
+
+        //Put I-L and prec in kernel parameter
+        fd = socket(AF_NETLINK ,SOCK_RAW , NETLINK_ILNP );
+
+        /* source address */
+        memset(&s_nladdr, 0 ,sizeof(s_nladdr));
+        s_nladdr.nl_family= AF_NETLINK ;
+        s_nladdr.nl_pad=0;
+        s_nladdr.nl_pid = getpid();
+        bind(fd, (struct sockaddr*)&s_nladdr, sizeof(s_nladdr));
+
+        /* destination address */
+        memset(&d_nladdr, 0 ,sizeof(d_nladdr));
+        d_nladdr.nl_family= AF_NETLINK ;
+        d_nladdr.nl_pad=0;
+        d_nladdr.nl_pid = 0; /* destined to kernel */
+
+        /* Fill the netlink message header */
+        nlh = (struct nlmsghdr *)malloc(100);
+        memset(nlh , 0 , 100);
 
-   STRING_FIELD (addr, isspace, 1);
+        entry = (struct ilnp_cache_entry *)malloc(sizeof(struct ilnp_cache_entry));
+        memmove(&entry->l64, &entdata->host_addr[0], sizeof(entdata->host_addr[0])*8);
+        memmove(&entry->nid, &entdata->host_addr[8], sizeof(entdata->host_addr[0])*8);
+        entry->l64_prec = prec;
+        entry->nid_prec = prnid;
+        entry->timestamp = 0;
 
-   /* Parse address.  */
+        memcpy(NLMSG_DATA(nlh), entry, sizeof(struct ilnp_cache_entry));
+
+
+        nlh->nlmsg_len =100;
+        nlh->nlmsg_pid = getpid();
+        nlh->nlmsg_flags = 1;
+        nlh->nlmsg_type = 0;
+
+        /*iov structure */
+
+        iov.iov_base = (void *)nlh;
+        iov.iov_len = nlh->nlmsg_len;
+
+        /* msg */
+        memset(&msg,0,sizeof(msg));
+        msg.msg_name = (void *) &d_nladdr ;
+        msg.msg_namelen=sizeof(d_nladdr);
+        msg.msg_iov = &iov;
+        msg.msg_iovlen = 1;
+        sendmsg(fd, &msg, 0);
+
+
+        close(fd);
+
+        return 1;
+
+   }
+   else {
+
+   //add by dp -----finish-------
+
+	 /* Parse address.  */
    if (inet_pton (af == AF_UNSPEC ? AF_INET : af, addr, entdata->host_addr)
        > 0)
      af = af == AF_UNSPEC ? AF_INET : af;
    else
      {
        if (af == AF_INET6 && (flags & AI_V4MAPPED) != 0
-	   && inet_pton (AF_INET, addr, entdata->host_addr) > 0)
-	 map_v4v6_address ((char *) entdata->host_addr,
-			   (char *) entdata->host_addr);
+     && inet_pton (AF_INET, addr, entdata->host_addr) > 0)
+   map_v4v6_address ((char *) entdata->host_addr,
+         (char *) entdata->host_addr);
        else if (af == AF_INET
-		&& inet_pton (AF_INET6, addr, entdata->host_addr) > 0)
-	 {
-	   if (IN6_IS_ADDR_V4MAPPED (entdata->host_addr))
-	     memcpy (entdata->host_addr, entdata->host_addr + 12, INADDRSZ);
-	   else if (IN6_IS_ADDR_LOOPBACK (entdata->host_addr))
-	     {
-	       in_addr_t localhost = htonl (INADDR_LOOPBACK);
-	       memcpy (entdata->host_addr, &localhost, sizeof (localhost));
-	     }
-	   else
-	     /* Illegal address: ignore line.  */
-	     return 0;
-	 }
+    && inet_pton (AF_INET6, addr, entdata->host_addr) > 0)
+   {
+     if (IN6_IS_ADDR_V4MAPPED (entdata->host_addr))
+       memcpy (entdata->host_addr, entdata->host_addr + 12, INADDRSZ);
+     else if (IN6_IS_ADDR_LOOPBACK (entdata->host_addr))
+       {
+         in_addr_t localhost = htonl (INADDR_LOOPBACK);
+         memcpy (entdata->host_addr, &localhost, sizeof (localhost));
+       }
+     else
+		 /* Illegal address: ignore line.  */
+       return 0;
+   }
        else if (af == AF_UNSPEC
-		&& inet_pton (AF_INET6, addr, entdata->host_addr) > 0)
-	 af = AF_INET6;
+    && inet_pton (AF_INET6, addr, entdata->host_addr) > 0)
+   af = AF_INET6;
        else
-	 /* Illegal address: ignore line.  */
-	 return 0;
+			 /* Illegal address: ignore line.  */
+   return 0;
      }
 
-   /* We always return entries of the requested form.  */
+   }// added by dp, migrated ry6 - Closing 'case not ILNP clause'
+
+	 /* We always return entries of the requested form.  */
    result->h_addrtype = af;
    result->h_length = af == AF_INET ? INADDRSZ : IN6ADDRSZ;
 
-   /* Store a pointer to the address in the expected form.  */
+	 /* Store a pointer to the address in the expected form.  */
    entdata->h_addr_ptrs[0] = (char *) entdata->host_addr;
    entdata->h_addr_ptrs[1] = NULL;
    result->h_addr_list = entdata->h_addr_ptrs;
@@ -98,244 +289,244 @@
  })
 
 #define EXTRA_ARGS_VALUE \
-  , ((_res.options & RES_USE_INET6) ? AF_INET6 : AF_INET),		      \
+  , ((_res.options & RES_USE_INET6) ? AF_INET6 : AF_INET),          \
   ((_res.options & RES_USE_INET6) ? AI_V4MAPPED : 0)
 #include "files-XXX.c"
 #undef EXTRA_ARGS_VALUE
 
 /* We only need to consider IPv4 mapped addresses if the input to the
-   gethostbyaddr() function is an IPv6 address.  */
+gethostbyaddr() function is an IPv6 address.  */
 #define EXTRA_ARGS_VALUE \
   , af, (len == IN6ADDRSZ ? AI_V4MAPPED : 0)
 DB_LOOKUP (hostbyaddr, ,,,
-	   {
-	     if (result->h_length == (int) len
-		 && ! memcmp (addr, result->h_addr_list[0], len))
-	       break;
-	   }, const void *addr, socklen_t len, int af)
+     {
+       if (result->h_length == (int) len
+     && ! memcmp (addr, result->h_addr_list[0], len))
+         break;
+     }, const void *addr, socklen_t len, int af)
 #undef EXTRA_ARGS_VALUE
 
 enum nss_status
 _nss_files_gethostbyname3_r (const char *name, int af, struct hostent *result,
-			     char *buffer, size_t buflen, int *errnop,
-			     int *herrnop, int32_t *ttlp, char **canonp)
+           char *buffer, size_t buflen, int *errnop,
+           int *herrnop, int32_t *ttlp, char **canonp)
 {
   FILE *stream = NULL;
   uintptr_t pad = -(uintptr_t) buffer % __alignof__ (struct hostent_data);
   buffer += pad;
   buflen = buflen > pad ? buflen - pad : 0;
 
-  /* Open file.  */
+	/* Open file.  */
   enum nss_status status = internal_setent (&stream);
 
   if (status == NSS_STATUS_SUCCESS)
     {
       /* XXX Is using _res to determine whether we want to convert IPv4
-         addresses to IPv6 addresses really the right thing to do?  */
+			addresses to IPv6 addresses really the right thing to do?  */
       int flags = ((_res.options & RES_USE_INET6) ? AI_V4MAPPED : 0);
 
       while ((status = internal_getent (stream, result, buffer, buflen, errnop,
-					herrnop, af, flags))
-	     == NSS_STATUS_SUCCESS)
-	{
-	  LOOKUP_NAME_CASE (h_name, h_aliases)
-	}
+          herrnop, af, flags))
+       == NSS_STATUS_SUCCESS)
+  {
+    LOOKUP_NAME_CASE (h_name, h_aliases)
+  }
 
       if (status == NSS_STATUS_SUCCESS
-	  && _res_hconf.flags & HCONF_FLAG_MULTI)
-	{
-	  /* We have to get all host entries from the file.  */
-	  size_t tmp_buflen = MIN (buflen, 4096);
-	  char tmp_buffer_stack[tmp_buflen]
-	    __attribute__ ((__aligned__ (__alignof__ (struct hostent_data))));
-	  char *tmp_buffer = tmp_buffer_stack;
-	  struct hostent tmp_result_buf;
-	  int naddrs = 1;
-	  int naliases = 0;
-	  char *bufferend;
-	  bool tmp_buffer_malloced = false;
-
-	  while (result->h_aliases[naliases] != NULL)
-	    ++naliases;
-
-	  bufferend = (char *) &result->h_aliases[naliases + 1];
-
-	again:
-	  while ((status = internal_getent (stream, &tmp_result_buf, tmp_buffer,
-					    tmp_buflen, errnop, herrnop, af,
-					    flags))
-		 == NSS_STATUS_SUCCESS)
-	    {
-	      int matches = 1;
-	      struct hostent *old_result = result;
-	      result = &tmp_result_buf;
-	      /* The following piece is a bit clumsy but we want to use the
-		 `LOOKUP_NAME_CASE' value.  The optimizer should do its
+    && _res_hconf.flags & HCONF_FLAG_MULTI)
+  {
+		/* We have to get all host entries from the file.  */
+    size_t tmp_buflen = MIN (buflen, 4096);
+    char tmp_buffer_stack[tmp_buflen]
+      __attribute__ ((__aligned__ (__alignof__ (struct hostent_data))));
+    char *tmp_buffer = tmp_buffer_stack;
+    struct hostent tmp_result_buf;
+    int naddrs = 1;
+    int naliases = 0;
+    char *bufferend;
+    bool tmp_buffer_malloced = false;
+
+    while (result->h_aliases[naliases] != NULL)
+      ++naliases;
+
+    bufferend = (char *) &result->h_aliases[naliases + 1];
+
+  again:
+    while ((status = internal_getent (stream, &tmp_result_buf, tmp_buffer,
+              tmp_buflen, errnop, herrnop, af,
+              flags))
+     == NSS_STATUS_SUCCESS)
+      {
+        int matches = 1;
+        struct hostent *old_result = result;
+        result = &tmp_result_buf;
+        /* The following piece is a bit clumsy but we want to use the
+     `LOOKUP_NAME_CASE' value.  The optimizer should do its
 		 job.  */
-	      do
-		{
-		  LOOKUP_NAME_CASE (h_name, h_aliases)
-		  result = old_result;
-		}
-	      while ((matches = 0));
-
-	      if (matches)
-		{
-		  /* We could be very clever and try to recycle a few bytes
-		     in the buffer instead of generating new arrays.  But
-		     we are not doing this here since it's more work than
-		     it's worth.  Simply let the user provide a bit bigger
-		     buffer.  */
-		  char **new_h_addr_list;
-		  char **new_h_aliases;
-		  int newaliases = 0;
-		  size_t newstrlen = 0;
-		  int cnt;
-
-		  /* Count the new aliases and the length of the strings.  */
-		  while (tmp_result_buf.h_aliases[newaliases] != NULL)
-		    {
-		      char *cp = tmp_result_buf.h_aliases[newaliases];
-		      ++newaliases;
-		      newstrlen += strlen (cp) + 1;
-		    }
-		  /* If the real name is different add it also to the
-		     aliases.  This means that there is a duplication
-		     in the alias list but this is really the user's
-		     problem.  */
-		  if (strcmp (old_result->h_name,
-			      tmp_result_buf.h_name) != 0)
-		    {
-		      ++newaliases;
-		      newstrlen += strlen (tmp_result_buf.h_name) + 1;
-		    }
-
-		  /* Make sure bufferend is aligned.  */
-		  assert ((bufferend - (char *) 0) % sizeof (char *) == 0);
-
-		  /* Now we can check whether the buffer is large enough.
-		     16 is the maximal size of the IP address.  */
-		  if (bufferend + 16 + (naddrs + 2) * sizeof (char *)
-		      + roundup (newstrlen, sizeof (char *))
-		      + (naliases + newaliases + 1) * sizeof (char *)
-		      >= buffer + buflen)
-		    {
-		      *errnop = ERANGE;
-		      *herrnop = NETDB_INTERNAL;
-		      status = NSS_STATUS_TRYAGAIN;
-		      goto out;
-		    }
-
-		  new_h_addr_list =
-		    (char **) (bufferend
-			       + roundup (newstrlen, sizeof (char *))
-			       + 16);
-		  new_h_aliases =
-		    (char **) ((char *) new_h_addr_list
-			       + (naddrs + 2) * sizeof (char *));
-
-		  /* Copy the old data in the new arrays.  */
-		  for (cnt = 0; cnt < naddrs; ++cnt)
-		    new_h_addr_list[cnt] = old_result->h_addr_list[cnt];
-
-		  for (cnt = 0; cnt < naliases; ++cnt)
-		    new_h_aliases[cnt] = old_result->h_aliases[cnt];
-
-		  /* Store the new strings.  */
-		  cnt = 0;
-		  while (tmp_result_buf.h_aliases[cnt] != NULL)
-		    {
-		      new_h_aliases[naliases++] = bufferend;
-		      bufferend = (__stpcpy (bufferend,
-					     tmp_result_buf.h_aliases[cnt])
-				   + 1);
-		      ++cnt;
-		    }
-
-		  if (cnt < newaliases)
-		    {
-		      new_h_aliases[naliases++] = bufferend;
-		      bufferend = __stpcpy (bufferend,
-					    tmp_result_buf.h_name) + 1;
-		    }
-
-		  /* Final NULL pointer.  */
-		  new_h_aliases[naliases] = NULL;
-
-		  /* Round up the buffer end address.  */
-		  bufferend += (sizeof (char *)
-				- ((bufferend - (char *) 0)
-				   % sizeof (char *))) % sizeof (char *);
-
-		  /* Now the new address.  */
-		  new_h_addr_list[naddrs++] =
-		    memcpy (bufferend, tmp_result_buf.h_addr,
-			    tmp_result_buf.h_length);
-
-		  /* Also here a final NULL pointer.  */
-		  new_h_addr_list[naddrs] = NULL;
-
-		  /* Store the new array pointers.  */
-		  old_result->h_aliases = new_h_aliases;
-		  old_result->h_addr_list = new_h_addr_list;
-
-		  /* Compute the new buffer end.  */
-		  bufferend = (char *) &new_h_aliases[naliases + 1];
-		  assert (bufferend <= buffer + buflen);
-
-		  result = old_result;
-		}
-	    }
-
-	  if (status == NSS_STATUS_TRYAGAIN)
-	    {
-	      size_t newsize = 2 * tmp_buflen;
-	      if (tmp_buffer_malloced)
-		{
-		  char *newp = realloc (tmp_buffer, newsize);
-		  if (newp != NULL)
-		    {
-		      assert ((((uintptr_t) newp)
-			       & (__alignof__ (struct hostent_data) - 1))
-			      == 0);
-		      tmp_buffer = newp;
-		      tmp_buflen = newsize;
-		      goto again;
-		    }
-		}
-	      else if (!__libc_use_alloca (buflen + newsize))
-		{
-		  tmp_buffer = malloc (newsize);
-		  if (tmp_buffer != NULL)
-		    {
-		      assert ((((uintptr_t) tmp_buffer)
-			       & (__alignof__ (struct hostent_data) - 1))
-			      == 0);
-		      tmp_buffer_malloced = true;
-		      tmp_buflen = newsize;
-		      goto again;
-		    }
-		}
-	      else
-		{
-		  tmp_buffer
-		    = extend_alloca (tmp_buffer, tmp_buflen,
-				     newsize
-				     + __alignof__ (struct hostent_data));
-		  tmp_buffer = (char *) (((uintptr_t) tmp_buffer
-					  + __alignof__ (struct hostent_data)
-					  - 1)
-					 & ~(__alignof__ (struct hostent_data)
-					     - 1));
-		  goto again;
-		}
-	    }
-	  else
-	    status = NSS_STATUS_SUCCESS;
-	out:
-	  if (tmp_buffer_malloced)
-	    free (tmp_buffer);
-	}
+        do
+    {
+      LOOKUP_NAME_CASE (h_name, h_aliases)
+      result = old_result;
+    }
+        while ((matches = 0));
+
+        if (matches)
+    {
+      /* We could be very clever and try to recycle a few bytes
+         in the buffer instead of generating new arrays.  But
+         we are not doing this here since it's more work than
+         it's worth.  Simply let the user provide a bit bigger
+				 buffer.  */
+      char **new_h_addr_list;
+      char **new_h_aliases;
+      int newaliases = 0;
+      size_t newstrlen = 0;
+      int cnt;
+
+			/* Count the new aliases and the length of the strings.  */
+      while (tmp_result_buf.h_aliases[newaliases] != NULL)
+        {
+          char *cp = tmp_result_buf.h_aliases[newaliases];
+          ++newaliases;
+          newstrlen += strlen (cp) + 1;
+        }
+      /* If the real name is different add it also to the
+         aliases.  This means that there is a duplication
+         in the alias list but this is really the user's
+				 problem.  */
+      if (strcmp (old_result->h_name,
+            tmp_result_buf.h_name) != 0)
+        {
+          ++newaliases;
+          newstrlen += strlen (tmp_result_buf.h_name) + 1;
+        }
+
+				/* Make sure bufferend is aligned.  */
+      assert ((bufferend - (char *) 0) % sizeof (char *) == 0);
+
+      /* Now we can check whether the buffer is large enough.
+			16 is the maximal size of the IP address.  */
+      if (bufferend + 16 + (naddrs + 2) * sizeof (char *)
+          + roundup (newstrlen, sizeof (char *))
+          + (naliases + newaliases + 1) * sizeof (char *)
+          >= buffer + buflen)
+        {
+          *errnop = ERANGE;
+          *herrnop = NETDB_INTERNAL;
+          status = NSS_STATUS_TRYAGAIN;
+          goto out;
+        }
+
+      new_h_addr_list =
+        (char **) (bufferend
+             + roundup (newstrlen, sizeof (char *))
+             + 16);
+      new_h_aliases =
+        (char **) ((char *) new_h_addr_list
+             + (naddrs + 2) * sizeof (char *));
+
+						 /* Copy the old data in the new arrays.  */
+      for (cnt = 0; cnt < naddrs; ++cnt)
+        new_h_addr_list[cnt] = old_result->h_addr_list[cnt];
+
+      for (cnt = 0; cnt < naliases; ++cnt)
+        new_h_aliases[cnt] = old_result->h_aliases[cnt];
+
+				/* Store the new strings.  */
+      cnt = 0;
+      while (tmp_result_buf.h_aliases[cnt] != NULL)
+        {
+          new_h_aliases[naliases++] = bufferend;
+          bufferend = (__stpcpy (bufferend,
+               tmp_result_buf.h_aliases[cnt])
+           + 1);
+          ++cnt;
+        }
+
+      if (cnt < newaliases)
+        {
+          new_h_aliases[naliases++] = bufferend;
+          bufferend = __stpcpy (bufferend,
+              tmp_result_buf.h_name) + 1;
+        }
+
+				/* Final NULL pointer.  */
+      new_h_aliases[naliases] = NULL;
+
+			/* Round up the buffer end address.  */
+      bufferend += (sizeof (char *)
+        - ((bufferend - (char *) 0)
+           % sizeof (char *))) % sizeof (char *);
+
+					 /* Now the new address.  */
+      new_h_addr_list[naddrs++] =
+        memcpy (bufferend, tmp_result_buf.h_addr,
+          tmp_result_buf.h_length);
+
+					/* Also here a final NULL pointer.  */
+      new_h_addr_list[naddrs] = NULL;
+
+			/* Store the new array pointers.  */
+      old_result->h_aliases = new_h_aliases;
+      old_result->h_addr_list = new_h_addr_list;
+
+			/* Compute the new buffer end.  */
+      bufferend = (char *) &new_h_aliases[naliases + 1];
+      assert (bufferend <= buffer + buflen);
+
+      result = old_result;
+    }
+      }
+
+    if (status == NSS_STATUS_TRYAGAIN)
+      {
+        size_t newsize = 2 * tmp_buflen;
+        if (tmp_buffer_malloced)
+    {
+      char *newp = realloc (tmp_buffer, newsize);
+      if (newp != NULL)
+        {
+          assert ((((uintptr_t) newp)
+             & (__alignof__ (struct hostent_data) - 1))
+            == 0);
+          tmp_buffer = newp;
+          tmp_buflen = newsize;
+          goto again;
+        }
+    }
+        else if (!__libc_use_alloca (buflen + newsize))
+    {
+      tmp_buffer = malloc (newsize);
+      if (tmp_buffer != NULL)
+        {
+          assert ((((uintptr_t) tmp_buffer)
+             & (__alignof__ (struct hostent_data) - 1))
+            == 0);
+          tmp_buffer_malloced = true;
+          tmp_buflen = newsize;
+          goto again;
+        }
+    }
+        else
+    {
+      tmp_buffer
+        = extend_alloca (tmp_buffer, tmp_buflen,
+             newsize
+             + __alignof__ (struct hostent_data));
+      tmp_buffer = (char *) (((uintptr_t) tmp_buffer
+            + __alignof__ (struct hostent_data)
+            - 1)
+           & ~(__alignof__ (struct hostent_data)
+               - 1));
+      goto again;
+    }
+      }
+    else
+      status = NSS_STATUS_SUCCESS;
+  out:
+    if (tmp_buffer_malloced)
+      free (tmp_buffer);
+  }
 
       internal_endent (&stream);
     }
@@ -348,32 +539,32 @@
 
 enum nss_status
 _nss_files_gethostbyname_r (const char *name, struct hostent *result,
-			    char *buffer, size_t buflen, int *errnop,
-			    int *herrnop)
+          char *buffer, size_t buflen, int *errnop,
+          int *herrnop)
 {
   int af = ((_res.options & RES_USE_INET6) ? AF_INET6 : AF_INET);
 
   return _nss_files_gethostbyname3_r (name, af, result, buffer, buflen,
-				      errnop, herrnop, NULL, NULL);
+              errnop, herrnop, NULL, NULL);
 }
 
 enum nss_status
 _nss_files_gethostbyname2_r (const char *name, int af, struct hostent *result,
-			     char *buffer, size_t buflen, int *errnop,
-			     int *herrnop)
+           char *buffer, size_t buflen, int *errnop,
+           int *herrnop)
 {
   return _nss_files_gethostbyname3_r (name, af, result, buffer, buflen,
-				      errnop, herrnop, NULL, NULL);
+              errnop, herrnop, NULL, NULL);
 }
 
 enum nss_status
 _nss_files_gethostbyname4_r (const char *name, struct gaih_addrtuple **pat,
-			     char *buffer, size_t buflen, int *errnop,
-			     int *herrnop, int32_t *ttlp)
+           char *buffer, size_t buflen, int *errnop,
+           int *herrnop, int32_t *ttlp)
 {
   FILE *stream = NULL;
 
-  /* Open file.  */
+	/* Open file.  */
   enum nss_status status = internal_setent (&stream);
 
   if (status == NSS_STATUS_SUCCESS)
@@ -381,89 +572,89 @@
       bool any = false;
       bool got_canon = false;
       while (1)
-	{
-	  /* Align the buffer for the next record.  */
-	  uintptr_t pad = (-(uintptr_t) buffer
-			   % __alignof__ (struct hostent_data));
-	  buffer += pad;
-	  buflen = buflen > pad ? buflen - pad : 0;
-
-	  struct hostent result;
-	  status = internal_getent (stream, &result, buffer, buflen, errnop,
-				    herrnop, AF_UNSPEC, 0);
-	  if (status != NSS_STATUS_SUCCESS)
-	    break;
-
-	  int naliases = 0;
-	  if (__strcasecmp (name, result.h_name) != 0)
-	    {
-	      for (; result.h_aliases[naliases] != NULL; ++naliases)
-		if (! __strcasecmp (name, result.h_aliases[naliases]))
-		  break;
-	      if (result.h_aliases[naliases] == NULL)
-		continue;
-
-	      /* We know this alias exist.  Count it.  */
-	      ++naliases;
-	    }
-
-	  /* Determine how much memory has been used so far.  */
-	  // XXX It is not necessary to preserve the aliases array
-	  while (result.h_aliases[naliases] != NULL)
-	    ++naliases;
-	  char *bufferend = (char *) &result.h_aliases[naliases + 1];
-	  assert (buflen >= bufferend - buffer);
-	  buflen -= bufferend - buffer;
-	  buffer = bufferend;
-
-	  /* We found something.  */
-	  any = true;
-
-	  /* Create the record the caller expects.  There is only one
-	     address.  */
-	  assert (result.h_addr_list[1] == NULL);
-	  if (*pat == NULL)
-	    {
-	      uintptr_t pad = (-(uintptr_t) buffer
-			       % __alignof__ (struct gaih_addrtuple));
-	      buffer += pad;
-	      buflen = buflen > pad ? buflen - pad : 0;
-
-	      if (__builtin_expect (buflen < sizeof (struct gaih_addrtuple),
-				    0))
-		{
-		  *errnop = ERANGE;
-		  *herrnop = NETDB_INTERNAL;
-		  status = NSS_STATUS_TRYAGAIN;
-		  break;
-		}
-
-	      *pat = (struct gaih_addrtuple *) buffer;
-	      buffer += sizeof (struct gaih_addrtuple);
-	      buflen -= sizeof (struct gaih_addrtuple);
-	    }
-
-	  (*pat)->next = NULL;
-	  (*pat)->name = got_canon ? NULL : result.h_name;
-	  got_canon = true;
-	  (*pat)->family = result.h_addrtype;
-	  memcpy ((*pat)->addr, result.h_addr_list[0], result.h_length);
-	  (*pat)->scopeid = 0;
-
-	  pat = &((*pat)->next);
-
-	  /* If we only look for the first matching entry we are done.  */
-	  if ((_res_hconf.flags & HCONF_FLAG_MULTI) == 0)
-	    break;
-	}
+  {
+		/* Align the buffer for the next record.  */
+    uintptr_t pad = (-(uintptr_t) buffer
+         % __alignof__ (struct hostent_data));
+    buffer += pad;
+    buflen = buflen > pad ? buflen - pad : 0;
+
+    struct hostent result;
+    status = internal_getent (stream, &result, buffer, buflen, errnop,
+            herrnop, AF_UNSPEC, 0);
+    if (status != NSS_STATUS_SUCCESS)
+      break;
+
+    int naliases = 0;
+    if (__strcasecmp (name, result.h_name) != 0)
+      {
+        for (; result.h_aliases[naliases] != NULL; ++naliases)
+    if (! __strcasecmp (name, result.h_aliases[naliases]))
+      break;
+        if (result.h_aliases[naliases] == NULL)
+    continue;
+
+		/* We know this alias exist.  Count it.  */
+        ++naliases;
+      }
+
+			/* Determine how much memory has been used so far.  */
+    // XXX It is not necessary to preserve the aliases array
+    while (result.h_aliases[naliases] != NULL)
+      ++naliases;
+    char *bufferend = (char *) &result.h_aliases[naliases + 1];
+    assert (buflen >= bufferend - buffer);
+    buflen -= bufferend - buffer;
+    buffer = bufferend;
+
+		/* We found something.  */
+    any = true;
+
+    /* Create the record the caller expects.  There is only one
+		address.  */
+    assert (result.h_addr_list[1] == NULL);
+    if (*pat == NULL)
+      {
+        uintptr_t pad = (-(uintptr_t) buffer
+             % __alignof__ (struct gaih_addrtuple));
+        buffer += pad;
+        buflen = buflen > pad ? buflen - pad : 0;
+
+        if (__builtin_expect (buflen < sizeof (struct gaih_addrtuple),
+            0))
+    {
+      *errnop = ERANGE;
+      *herrnop = NETDB_INTERNAL;
+      status = NSS_STATUS_TRYAGAIN;
+      break;
+    }
+
+        *pat = (struct gaih_addrtuple *) buffer;
+        buffer += sizeof (struct gaih_addrtuple);
+        buflen -= sizeof (struct gaih_addrtuple);
+      }
+
+    (*pat)->next = NULL;
+    (*pat)->name = got_canon ? NULL : result.h_name;
+    got_canon = true;
+    (*pat)->family = result.h_addrtype;
+    memcpy ((*pat)->addr, result.h_addr_list[0], result.h_length);
+    (*pat)->scopeid = 0;
+
+    pat = &((*pat)->next);
+
+		/* If we only look for the first matching entry we are done.  */
+    if ((_res_hconf.flags & HCONF_FLAG_MULTI) == 0)
+      break;
+  }
 
       /* If we have to look for multiple records and found one, this
-	 is a success.  */
+			is a success.  */
       if (status == NSS_STATUS_NOTFOUND && any)
-	{
-	  assert ((_res_hconf.flags & HCONF_FLAG_MULTI) != 0);
-	  status = NSS_STATUS_SUCCESS;
-	}
+  {
+    assert ((_res_hconf.flags & HCONF_FLAG_MULTI) != 0);
+    status = NSS_STATUS_SUCCESS;
+  }
 
       internal_endent (&stream);
     }
@@ -475,7 +666,7 @@
   else
     {
       *errnop = errno;
-      *herrnop = HOST_NOT_FOUND;
+      *herrnop = NO_DATA;
     }
 
   return status;
--- a/version.h
+++ b/version.h
@@ -1,4 +1,4 @@
 /* This file just defines the current version number of libc.  */
 
 #define RELEASE "stable"
-#define VERSION "2.24"
+#define VERSION "2.24-ilnp-1.3"
